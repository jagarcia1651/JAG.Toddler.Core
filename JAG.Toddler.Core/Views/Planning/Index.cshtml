@model JAG.Toddler.Core.ViewModels.PlanningViewModel

@{
    ViewData["Title"] = "Planning Screen";
}
<table>
    <tr>
        <th>Month</th>
        @if (Model.PlanningModel.NextYear.Any())
        {
            @for (int i = 12; i > 0; i--)
            {
                DateTime MonthHeader = Model.SelectedPlanDate;
                <td class="month">
                    @MonthHeader.AddMonths(-i).ToString("MMM")
                </td>
            }
        }
    </tr>
    <tr>
        <th>Sales 2 Prior</th>
        @{
            int sales2PriorTotal = 0;
            foreach (var entry in Model.PlanningModel.TwoPriorYear)
            {
                int displaySales = (int)entry.Sales;
                sales2PriorTotal += displaySales;
                <td>
                    @displaySales.ToString("n0")
                </td>
            }
            <td class="calculated total">@sales2PriorTotal.ToString("n0")</td>
        }
    </tr>
    <tr>
        <th>Sales Prior</th>
        @{
            int salesPriorTotal = 0;
            foreach (var entry in Model.PlanningModel.PriorYear)
            {
                int displaySales = (int)entry.Sales;
                salesPriorTotal += displaySales;
                <td>
                    @displaySales.ToString("n0")
                </td>
            }
            <td class="calculated total">@salesPriorTotal.ToString("n0")</td>
        }
    </tr>
    <tr>
        <th>Sales Current</th>
        @{
            int salesCurrentTotal = 0;
            @foreach (var entry in Model.PlanningModel.CurrentYear)
            {
                var last = Model.PlanningModel.CurrentYear.Last();
                int displaySales = (int)entry.Sales;
                salesCurrentTotal += displaySales;
                if (entry == last)
                {
                    <td class="lastMonth">
                        @displaySales.ToString("n0")
                    </td>
                }
                else
                {
                    <td>
                        @displaySales.ToString("n0")
                    </td>
                }
            }
            <td class="calculated total">@salesCurrentTotal.ToString("n0")</td>
            float modSalesChangePercent = 0;
            <td class="plan-input total">@modSalesChangePercent.ToString("p1")</td>
        }
    </tr>
    <tr>
        <th>Percent Change</th>
        @if (Model.PlanningModel.NextYear.Any())
        {
            @for (int i = 0; i < Model.PlanningModel.CurrentYear.Count() - 1; i++)
            {
                float change = (float)((Model.PlanningModel.CurrentYear.ElementAt(i).Sales - Model.PlanningModel.PriorYear.ElementAt(i).Sales) / (float)Model.PlanningModel.PriorYear.ElementAt(i).Sales);
                <td class="calculated">
                    @change.ToString("p0")
                </td>
            }

            float currentChange = (float)((Model.PlanningModel.CurrentYear.Last().Sales - Model.PlanningModel.PriorYear.Last().Sales) / (float)Model.PlanningModel.PriorYear.Last().Sales);
            <td class="calculated lastMonth">
                @currentChange.ToString("p0")
            </td>
            float percentChangeTotal = (salesCurrentTotal - salesPriorTotal) / (float)salesPriorTotal;
            <td class="calculated total">@percentChangeTotal.ToString("p0")</td>
        }
    </tr>
    <tr>
        @if (Model.PlanningModel.CurrentYear.Any())
        {
            <td class="hidden" colspan="12">LM Sales Plan</td>
            int displaySales = (int)Model.PlanningModel.CurrentYear.Last().SalesPlan;
            <td class="lastMonth-plan">
                @displaySales.ToString("n0")
            </td>
        }
    </tr>
    <tr>
        <th>Sales Plan</th>
        @{
            int salesPlanTotal = 0;
            foreach (var entry in Model.PlanningModel.NextYear)
            {
                int displaySalesPlan = (int)entry.SalesPlan;
                salesPlanTotal += displaySalesPlan;
                <td class="plan-input">
                    @displaySalesPlan.ToString("n0")
                </td>
            }
            <td class="calculated plan-input total">@salesPlanTotal.ToString("n0")</td>
            float modSalesChange = 0;
            <td class="plan-input total">@modSalesChange.ToString("p1")</td>
        }
    </tr>
    <tr>
        <th>Stock Prior Year</th>
        @foreach (var entry in Model.PlanningModel.PriorYear)
        {
            int displayStocks = (int)entry.Stocks;
            <td>
                @displayStocks.ToString("n0")
            </td>
        }
    </tr>
    <tr>
        <th>Stock Current Year</th>
        @foreach (var entry in Model.PlanningModel.CurrentYear)
        {
            int displayStocks = (int)entry.Stocks;
            <td>
                @displayStocks.ToString("n0")
            </td>
        }
    </tr>
    <tr>
        <th>Stock Current Ratio</th>
        @for (int i = 0; i < Model.PlanningModel.CurrentYear.Count(); i++)
        {
            float ratio = (float)(Model.PlanningModel.CurrentYear.ElementAt(i).Stocks / (float)Model.PlanningModel.CurrentYear.ElementAt(i).Sales);
            <td class="calculated">
                @ratio.ToString("n2")
            </td>
        }
        <td class="hidden">Actual Turns</td>
        @{
            float stockAverage = 0;
            @if (Model.PlanningModel.CurrentYear.Any())
            {
                foreach (var entry in Model.PlanningModel.CurrentYear)
                {
                    stockAverage += (int)entry.Stocks;
                }
                stockAverage += (int)Model.PlanningModel.NextYear.First().Stocks;
                stockAverage = stockAverage / 13;
                float actualTurn = salesCurrentTotal / stockAverage;
                <td class="calculated total">
                    @actualTurn.ToString("n2")
                </td>
            }
        }
    </tr>
    <tr>
        <td class="hidden">On Hand</td>
        @{
            int stockTurnTotal = 0;
            if (Model.PlanningModel.NextYear.Any())
            {
                int displayStock = (int)Model.PlanningModel.NextYear.First().Stocks;
                stockTurnTotal += displayStock;
                <td class="lastMonth">
                    @displayStock.ToString("n0")
                </td>
                @for (int i = 11; i > 0; i--)
                {
                    DateTime MonthHeader = Model.SelectedPlanDate;
                    <td class="month">
                        @MonthHeader.AddMonths(-i).ToString("MMM")
                    </td>
                }
            }
        }
    </tr>
    <tr>
        <th>Stock Plan</th>
        @{
            if (Model.PlanningModel.NextYear.Any())
            {
                int displayStockPlan = (int)Model.PlanningModel.NextYear.First().StockPlan;
                <td class="lastMonth-plan">
                    @displayStockPlan.ToString("n0")
                </td>
                for (int i = 1; i < Model.PlanningModel.NextYear.Count(); i++)
                {
                    int stockPlan = (int)(Model.PlanningModel.NextYear.ElementAt(i).StockPlanRatio * Model.PlanningModel.NextYear.ElementAt(i).SalesPlan);
                    stockTurnTotal += stockPlan;
                    <td class="plan-calculated">
                        @stockPlan.ToString("n0")
                    </td>
                }
            }
        }
    </tr>
    <tr>
        <th>Stock Plan Ratio</th>
        @foreach (var entry in Model.PlanningModel.NextYear)
        {
            var first = Model.PlanningModel.NextYear.First();
            float ratio = (float)entry.StockPlanRatio;
            if (entry == first)
            {
                <td class="calculated">
                    @ratio.ToString("n2")
                </td>
            }
            else
            {
                <td class="plan-input">
                    @ratio.ToString("n2")
                </td>
            }
        }
        <td class="hidden">
            Planned Turns
        </td>
        @{
            float stockPlanAverage = stockTurnTotal / (float)12;
            float plannedTurns = salesPlanTotal / stockPlanAverage;
        }
        <td class="calculated plan-input total">
            @plannedTurns.ToString("n2")
        </td>
    </tr>
    <tr>
        <th>Markdowns Prior Year</th>
        @{
            int markdownsPriorTotal = 0;
            foreach (var entry in Model.PlanningModel.PriorYear)
            {
                int displayMarkdowns = (int)entry.Markdowns;
                markdownsPriorTotal += displayMarkdowns;
                <td>
                    @displayMarkdowns.ToString("n0")
                </td>
            }
            <td class="calculated total">@markdownsPriorTotal.ToString("n0")</td>
        }
    </tr>
    <tr>
        <th>Percent Sales Prior</th>
        @foreach (var entry in Model.PlanningModel.PriorYear)
        {
            float ratio = (float)(entry.Markdowns / (float)entry.Sales);
            <td class="calculated">@ratio.ToString("p1")</td>
        }
        <td class="hidden"></td>
        @{
            float percentSalesPriorTotal = markdownsPriorTotal / (float)salesPriorTotal;
        }
        <td class="calculated total">
            @percentSalesPriorTotal.ToString("p2")
        </td>
    </tr>
    <tr>
        <th>Markdowns Current Year</th>
        @{
            int markdownsCurrentTotal = 0;
            foreach (var entry in Model.PlanningModel.CurrentYear)
            {
                var last = Model.PlanningModel.CurrentYear.Last();
                int displayMarkdowns = (int)entry.Markdowns;
                markdownsCurrentTotal += displayMarkdowns;
                if (entry == last)
                {
                    <td class="lastMonth">
                        @displayMarkdowns.ToString("n0")
                    </td>
                }
                else
                {
                    <td>
                        @displayMarkdowns.ToString("n0")
                    </td>
                }
            }
            <td class="calculated total">
                @markdownsCurrentTotal.ToString("n0")
            </td>
        }
    </tr>
    <tr>
        <th>Percent Sales</th>
        @foreach (var entry in Model.PlanningModel.CurrentYear)
        {
            var last = Model.PlanningModel.CurrentYear.Last();
            float ratio = (float)(entry.Markdowns / (float)entry.Sales);
            if (entry == last)
            {

                <td class="calculated lastMonth">@ratio.ToString("p1")</td>
            }
            else
            {
                <td class="calculated">@ratio.ToString("p1")</td>
            }
        }
        <td class="hidden"></td>
        @{
            float percentSalesTotal = markdownsCurrentTotal / (float)salesCurrentTotal;
        }
        <td class="calculated total">
            @percentSalesTotal.ToString("p2")
        </td>
    </tr>
    <tr>
        @if (Model.PlanningModel.CurrentYear.Any())
        {
            <td class="hidden" colspan="12">LM Markdown Plan</td>
            int markdownPlan = (int)(Model.PlanningModel.CurrentYear.Last().MarkdownsPlanRatio * Model.PlanningModel.CurrentYear.Last().SalesPlan);
            <td class="lastMonth-plan">
                @markdownPlan.ToString("n0")
            </td>
        }
    </tr>
    <tr>
        <th>Markdowns Plan</th>
        @{
            int markdownsPlanTotal = 0;
            foreach (var entry in Model.PlanningModel.NextYear)
            {
                int markdownPlan = (int)(entry.MarkdownsPlanRatio * entry.SalesPlan);
                markdownsPlanTotal += markdownPlan;
                <td class="plan-calculated">
                    @markdownPlan.ToString("n0")
                </td>
            }
            <td class="calculated total plan-input">
                @markdownsPlanTotal.ToString("n0")
            </td>
        }
    </tr>
    <tr>
        <th>Markdowns Plan Ratio</th>
        @foreach (var entry in Model.PlanningModel.NextYear)
        {
            float displayMarkdownPlanRatio = (float)entry.MarkdownsPlanRatio;
            <td class="plan-input">
                @displayMarkdownPlanRatio.ToString("n2")
            </td>
        }
        <td class="hidden"></td>
        @{
            float percentSalesPlan = markdownsPlanTotal / (float)salesPlanTotal;
        }
        <td class="calculated total plan-input">
            @percentSalesPlan.ToString("p2")
        </td>
    </tr>
    <tr>
        <th>Month</th>
        @if (Model.PlanningModel.NextYear.Any())
        {
            @for (int i = 12; i > 0; i--)
            {
                DateTime MonthHeader = Model.SelectedPlanDate;
                <td class="month">
                    @MonthHeader.AddMonths(-i).ToString("MMM")
                </td>
            }
        }
    </tr>
    <tr>
        <th>Rec/Retail Month</th>
        @{
            int recRetailTotal = 0;
            foreach (var entry in Model.PlanningModel.CurrentYear)
            {
                var last = Model.PlanningModel.CurrentYear.Last();
                int displayRec = (int)entry.ReceivedAtRetail;
                recRetailTotal += displayRec;
                if (entry == last)
                {
                    <td class="lastMonth">
                        @displayRec.ToString("n0")
                    </td>
                }
                else
                {
                    <td>
                        @displayRec.ToString("n0")
                    </td>
                }
            }
        }
        <td class="calculated total">
            @recRetailTotal.ToString("n0")
        </td>
    </tr>
    <tr>
        <th>Rec/Retail Plan</th>
        @{
            int recRetailPlanTotal = 0;
            foreach (var entry in Model.PlanningModel.NextYear)
            {
                var last = Model.PlanningModel.NextYear.Last();
                int displayRec = (int)entry.RecAtRetailPlan;
                recRetailPlanTotal += displayRec;
                if (entry == last)
                {
                    <td class="lastMonth-plan">
                        @displayRec.ToString("n0")
                    </td>
                }
                else
                {
                    <td class="plan-calculated">
                        @displayRec.ToString("n0")
                    </td>
                }
            }
        }
        <td class="calculated total">
            @recRetailPlanTotal.ToString("n0")
        </td>
    </tr>
    <tr>
        <th>Rec/Cost Month</th>
        @{
            int recCostTotal = 0;
            foreach (var entry in Model.PlanningModel.CurrentYear)
            {
                var last = Model.PlanningModel.CurrentYear.Last();
                int displayRec = (int)entry.ReceivedAtCost;
                recCostTotal += displayRec;
                if (entry == last)
                {
                    <td class="lastMonth">
                        @displayRec.ToString("n0")
                    </td>
                }
                else
                {
                    <td>
                        @displayRec.ToString("n0")
                    </td>
                }
            }
        }
        <td class="calculated total">
            @recCostTotal.ToString("n0")
        </td>
    </tr>
    @{
        float IMU = (recRetailTotal - recCostTotal) / (float)recRetailTotal;
    }
    <tr>
        <th>Rec/Cost Plan</th>
        @{
            int recCostPlanTotal = 0;
            foreach (var entry in Model.PlanningModel.NextYear)
            {
                var last = Model.PlanningModel.NextYear.Last();
                int displayRec = (int)(entry.RecAtRetailPlan * (1 - IMU));
                recCostPlanTotal += displayRec;
                if (entry == last)
                {
                    <td class="lastMonth-plan">
                        @displayRec.ToString("n0")
                    </td>
                }
                else
                {
                    <td class="plan-calculated">
                        @displayRec.ToString("n0")
                    </td>
                }
            }
        }
        <td class="calculated total">
            @recCostPlanTotal.ToString("n0")
        </td>
    </tr>
    <tr>
        <th>On Order Retail</th>
        @{
            int onOrderRetailTotal = 0;
            if (Model.PlanningModel.CurrentYear.Any())
            {
                int displayOnOrder;
                <td>
                    @{
                        displayOnOrder = (int)(Model.PlanningModel.CurrentYear.Last().Ufac1o / (1 - IMU));
                        onOrderRetailTotal += displayOnOrder;
                        @displayOnOrder.ToString("n0")
                    }
                </td>
                <td>
                    @{
                        displayOnOrder = (int)(Model.PlanningModel.CurrentYear.Last().Ufac2o / (1 - IMU));
                        onOrderRetailTotal += displayOnOrder;
                        @displayOnOrder.ToString("n0")
                    }
                </td>
                <td>
                    @{
                        displayOnOrder = (int)(Model.PlanningModel.CurrentYear.Last().Ufac3o / (1 - IMU));
                        @displayOnOrder.ToString("n0")
                    }
                </td>
                <td>
                    @{
                        displayOnOrder = (int)(Model.PlanningModel.CurrentYear.Last().Ufac4o / (1 - IMU));
                        @displayOnOrder.ToString("n0")
                    }
                </td>
                <td>
                    @{
                        displayOnOrder = (int)(Model.PlanningModel.CurrentYear.Last().Ufac5o / (1 - IMU));
                        @displayOnOrder.ToString("n0")
                    }
                </td>
                <td>
                    @{
                        displayOnOrder = (int)(Model.PlanningModel.CurrentYear.Last().Ufac6o / (1 - IMU));
                        @displayOnOrder.ToString("n0")
                    }
                </td>
                <td>
                    @{
                        displayOnOrder = (int)(Model.PlanningModel.CurrentYear.Last().Ufac7o / (1 - IMU));
                        @displayOnOrder.ToString("n0")
                    }
                </td>
                <td>
                    @{
                        displayOnOrder = (int)(Model.PlanningModel.CurrentYear.Last().Ufac8o / (1 - IMU));
                        @displayOnOrder.ToString("n0")
                    }
                </td>
                <td>
                    @{
                        displayOnOrder = (int)(Model.PlanningModel.CurrentYear.Last().Ufac9o / (1 - IMU));
                        @displayOnOrder.ToString("n0")
                    }
                </td>
                <td>
                    @{
                        displayOnOrder = (int)(Model.PlanningModel.CurrentYear.Last().Ufac10o / (1 - IMU));
                        @displayOnOrder.ToString("n0")
                    }
                </td>
                <td class="hidden"></td>
                <td>
                    @{
                        displayOnOrder = (int)(Model.PlanningModel.PriorYear.ElementAt(10).Ufac1o / (1 - IMU));
                        @displayOnOrder.ToString("n0")
                    }
                </td>
            }
        }

    </tr>
    <tr>
        <th>On Order Cost</th>
        @{
            if (Model.PlanningModel.CurrentYear.Any())
            {
                int displayOnOrder;
                <td>
                    @{
                        displayOnOrder = (int)Model.PlanningModel.CurrentYear.Last().Ufac1o;
                        @displayOnOrder.ToString("n0")
                    }
                </td>
                <td>
                    @{
                        displayOnOrder = (int)Model.PlanningModel.CurrentYear.Last().Ufac2o;
                        @displayOnOrder.ToString("n0")
                    }
                </td>
                <td>
                    @{
                        displayOnOrder = (int)Model.PlanningModel.CurrentYear.Last().Ufac3o;
                        @displayOnOrder.ToString("n0")
                    }
                </td>
                <td>
                    @{
                        displayOnOrder = (int)Model.PlanningModel.CurrentYear.Last().Ufac4o;
                        @displayOnOrder.ToString("n0")
                    }
                </td>
                <td>
                    @{
                        displayOnOrder = (int)Model.PlanningModel.CurrentYear.Last().Ufac5o;
                        @displayOnOrder.ToString("n0")
                    }
                </td>
                <td>
                    @{
                        displayOnOrder = (int)Model.PlanningModel.CurrentYear.Last().Ufac6o;
                        @displayOnOrder.ToString("n0")
                    }
                </td>
                <td>
                    @{
                        displayOnOrder = (int)Model.PlanningModel.CurrentYear.Last().Ufac7o;
                        @displayOnOrder.ToString("n0")
                    }
                </td>
                <td>
                    @{
                        displayOnOrder = (int)Model.PlanningModel.CurrentYear.Last().Ufac8o;
                        @displayOnOrder.ToString("n0")
                    }
                </td>
                <td>
                    @{
                        displayOnOrder = (int)Model.PlanningModel.CurrentYear.Last().Ufac9o;
                        @displayOnOrder.ToString("n0")
                    }
                </td>
                <td>
                    @{
                        displayOnOrder = (int)Model.PlanningModel.CurrentYear.Last().Ufac10o;
                        @displayOnOrder.ToString("n0")
                    }
                </td>
                <td class="hidden"></td>
                <td>
                    @{
                        displayOnOrder = (int)Model.PlanningModel.PriorYear.ElementAt(10).Ufac1o;
                        @displayOnOrder.ToString("n0")
                    }
                </td>
            }
        }
        <td class="hidden">IMU</td>
        <td class="calculated total">
            @IMU.ToString("p1")
        </td>
    </tr>
    <tr>
        <th>OTB at Retail</th>
        @if (Model.PlanningModel.NextYear.Any())
        {
            int monthIdx = 0;
            var currentMonth = Model.PlanningModel.CurrentYear.Last();
            int displayRetailOTB;
            <td class="plan-calculated">
                @{
                    displayRetailOTB = (int)(Model.PlanningModel.NextYear.ElementAt(monthIdx++).RecAtRetailPlan - (currentMonth.Ufac1o / (1 - IMU)));
                    @displayRetailOTB.ToString("n0")
                }
            </td>
            <td class="plan-calculated">
                @{
                    displayRetailOTB = (int)(Model.PlanningModel.NextYear.ElementAt(monthIdx++).RecAtRetailPlan - (currentMonth.Ufac2o / (1 - IMU)));
                    @displayRetailOTB.ToString("n0")
                }
            </td>
            <td class="plan-calculated">
                @{
                    displayRetailOTB = (int)(Model.PlanningModel.NextYear.ElementAt(monthIdx++).RecAtRetailPlan - (currentMonth.Ufac3o / (1 - IMU)));
                    @displayRetailOTB.ToString("n0")
                }
            </td>
            <td class="plan-calculated">
                @{
                    displayRetailOTB = (int)(Model.PlanningModel.NextYear.ElementAt(monthIdx++).RecAtRetailPlan - (currentMonth.Ufac4o / (1 - IMU)));
                    @displayRetailOTB.ToString("n0")
                }
            </td>
            <td class="plan-calculated">
                @{
                    displayRetailOTB = (int)(Model.PlanningModel.NextYear.ElementAt(monthIdx++).RecAtRetailPlan - (currentMonth.Ufac5o / (1 - IMU)));
                    @displayRetailOTB.ToString("n0")
                }
            </td>
            <td class="plan-calculated">
                @{
                    displayRetailOTB = (int)(Model.PlanningModel.NextYear.ElementAt(monthIdx++).RecAtRetailPlan - (currentMonth.Ufac6o / (1 - IMU)));
                    @displayRetailOTB.ToString("n0")
                }
            </td>
            <td class="plan-calculated">
                @{
                    displayRetailOTB = (int)(Model.PlanningModel.NextYear.ElementAt(monthIdx++).RecAtRetailPlan - (currentMonth.Ufac7o / (1 - IMU)));
                    @displayRetailOTB.ToString("n0")
                }
            </td>
            <td class="plan-calculated">
                @{
                    displayRetailOTB = (int)(Model.PlanningModel.NextYear.ElementAt(monthIdx++).RecAtRetailPlan - (currentMonth.Ufac8o / (1 - IMU)));
                    @displayRetailOTB.ToString("n0")
                }
            </td>
            <td class="plan-calculated">
                @{
                    displayRetailOTB = (int)(Model.PlanningModel.NextYear.ElementAt(monthIdx++).RecAtRetailPlan - (currentMonth.Ufac9o / (1 - IMU)));
                    @displayRetailOTB.ToString("n0")
                }
            </td>
            <td class="plan-calculated">
                @{
                    displayRetailOTB = (int)(Model.PlanningModel.NextYear.ElementAt(monthIdx++).RecAtRetailPlan - (currentMonth.Ufac10o / (1 - IMU)));
                    @displayRetailOTB.ToString("n0")
                }
            </td>
        }
    </tr>
    <tr>
        <th>OTB at Cost</th>
        @if (Model.PlanningModel.NextYear.Any())
        {
            int monthIdx = 0;
            var currentMonth = Model.PlanningModel.CurrentYear.Last();
            int displayCostOTB;
            <td class="plan-calculated">
                @{
                    displayCostOTB = (int)(Model.PlanningModel.NextYear.ElementAt(monthIdx++).RecAtRetailPlan - currentMonth.Ufac1o);
                    @displayCostOTB.ToString("n0")
                }
            </td>
            <td class="plan-calculated">
                @{
                    displayCostOTB = (int)(Model.PlanningModel.NextYear.ElementAt(monthIdx++).RecAtRetailPlan - currentMonth.Ufac2o);
                    @displayCostOTB.ToString("n0")
                }
            </td>
            <td class="plan-calculated">
                @{
                    displayCostOTB = (int)(Model.PlanningModel.NextYear.ElementAt(monthIdx++).RecAtRetailPlan - currentMonth.Ufac3o);
                    @displayCostOTB.ToString("n0")
                }
            </td>
            <td class="plan-calculated">
                @{
                    displayCostOTB = (int)(Model.PlanningModel.NextYear.ElementAt(monthIdx++).RecAtRetailPlan - currentMonth.Ufac4o);
                    @displayCostOTB.ToString("n0")
                }
            </td>
            <td class="plan-calculated">
                @{
                    displayCostOTB = (int)(Model.PlanningModel.NextYear.ElementAt(monthIdx++).RecAtRetailPlan - currentMonth.Ufac5o);
                    @displayCostOTB.ToString("n0")
                }
            </td>
            <td class="plan-calculated">
                @{
                    displayCostOTB = (int)(Model.PlanningModel.NextYear.ElementAt(monthIdx++).RecAtRetailPlan - currentMonth.Ufac6o);
                    @displayCostOTB.ToString("n0")
                }
            </td>
            <td class="plan-calculated">
                @{
                    displayCostOTB = (int)(Model.PlanningModel.NextYear.ElementAt(monthIdx++).RecAtRetailPlan - currentMonth.Ufac7o);
                    @displayCostOTB.ToString("n0")
                }
            </td>
            <td class="plan-calculated">
                @{
                    displayCostOTB = (int)(Model.PlanningModel.NextYear.ElementAt(monthIdx++).RecAtRetailPlan - currentMonth.Ufac8o);
                    @displayCostOTB.ToString("n0")
                }
            </td>
            <td class="plan-calculated">
                @{
                    displayCostOTB = (int)(Model.PlanningModel.NextYear.ElementAt(monthIdx++).RecAtRetailPlan - currentMonth.Ufac9o);
                    @displayCostOTB.ToString("n0")
                }
            </td>
            <td class="plan-calculated">
                @{
                    displayCostOTB = (int)(Model.PlanningModel.NextYear.ElementAt(monthIdx++).RecAtRetailPlan - currentMonth.Ufac10o);
                    @displayCostOTB.ToString("n0")
                }
            </td>
        }
    </tr>
</table>

@using (Html.BeginForm("Populate", "Planning", FormMethod.Get))
{
    <button type="button" id="exit">Exit</button>
    @Html.TextBoxFor(m => Model.SelectedPlanDate, "{0:MM/dd/yyyy}", new { id = "dateSelect" })
    @Html.DropDownListFor(m => Model.SelectedStoreId, Model.StoreSelect, new { id = "storeSelect" })
    @Html.DropDownListFor(m => Model.SelectedClassId, Model.ClassSelect, new { id = "classSelect" })

    <button type="submit" id="populate">Populate</button>
}


<script type="text/javascript">
    $(document).ready(function () {

        //Used to populate class list upon selecting a store
        $("#storeSelect").change(function () {

            var selectedStoreId = $("#storeSelect").val().toString();

            $.getJSON("/Planning/GETClassList",
                {
                    storeId: selectedStoreId
                },
                function (data) {
                    var classSelect = $("#classSelect");
                    classSelect.empty();

                    $.each(data, function (index, value) {
                        classSelect.append(
                            $('<option></option>').val(value.classId).html(value.classes)
                        );
                    });

                });

        });

        //#TODO
        //Create savecheck and add to buttons

        //Redirects user to homepage/switchboard.
        $("#exit").click(function () {
            location.href = "/"
        });

        //Prevent submission if class not selected
        $("#classSelect").prop('required', true);

        //Adds jqueryUI calendar popup to dateSelect field
        $("#dateSelect").datepicker();
    });
</script>

<link rel="stylesheet" href="~/css/planning.css" />